// Mocks generated by Mockito 5.4.2 from annotations
// in copilot/test/features/dashboard/data/repositories/pie_chart_data_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:copilot/core/common/data/datasources/activity_database.dart'
    as _i2;
import 'package:copilot/core/common/data/datasources/activity_local_data_source.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDriftActivityModel_0 extends _i1.SmartFake
    implements _i2.DriftActivityModel {
  _FakeDriftActivityModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRecordWithActivitySettings_1 extends _i1.SmartFake
    implements _i2.RecordWithActivitySettings {
  _FakeRecordWithActivitySettings_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ActivityLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockActivityLocalDataSource extends _i1.Mock
    implements _i3.ActivityLocalDataSource {
  MockActivityLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.RecordWithActivitySettings>> getRecords({
    required int? ammount,
    int? skip,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecords,
          [],
          {
            #ammount: ammount,
            #skip: skip,
          },
        ),
        returnValue: _i4.Future<List<_i2.RecordWithActivitySettings>>.value(
            <_i2.RecordWithActivitySettings>[]),
      ) as _i4.Future<List<_i2.RecordWithActivitySettings>>);

  @override
  _i4.Future<_i4.Stream<List<_i2.RecordWithActivitySettings>>> getRecordsRange({
    required int? from,
    required int? to,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecordsRange,
          [],
          {
            #from: from,
            #to: to,
          },
        ),
        returnValue:
            _i4.Future<_i4.Stream<List<_i2.RecordWithActivitySettings>>>.value(
                _i4.Stream<List<_i2.RecordWithActivitySettings>>.empty()),
      ) as _i4.Future<_i4.Stream<List<_i2.RecordWithActivitySettings>>>);

  @override
  _i4.Future<_i4.Stream<List<_i2.RecordWithActivitySettings>>>
      getRecordsRangeWithTag({
    required int? from,
    required int? to,
    required String? tag,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #getRecordsRangeWithTag,
              [],
              {
                #from: from,
                #to: to,
                #tag: tag,
              },
            ),
            returnValue: _i4
                .Future<_i4.Stream<List<_i2.RecordWithActivitySettings>>>.value(
                _i4.Stream<List<_i2.RecordWithActivitySettings>>.empty()),
          ) as _i4.Future<_i4.Stream<List<_i2.RecordWithActivitySettings>>>);

  @override
  _i4.Future<_i2.DriftRecordModel?> getFirstRecord() => (super.noSuchMethod(
        Invocation.method(
          #getFirstRecord,
          [],
        ),
        returnValue: _i4.Future<_i2.DriftRecordModel?>.value(),
      ) as _i4.Future<_i2.DriftRecordModel?>);

  @override
  _i4.Future<List<_i2.DriftActivityModel>> getActivitiesSettings() =>
      (super.noSuchMethod(
        Invocation.method(
          #getActivitiesSettings,
          [],
        ),
        returnValue: _i4.Future<List<_i2.DriftActivityModel>>.value(
            <_i2.DriftActivityModel>[]),
      ) as _i4.Future<List<_i2.DriftActivityModel>>);

  @override
  _i4.Future<_i2.DriftActivityModel> updateActivitySettings({
    required String? activityName,
    required String? newActivityName,
    required int? newColorHex,
    required String? tags,
    required int? newGoal,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateActivitySettings,
          [],
          {
            #activityName: activityName,
            #newActivityName: newActivityName,
            #newColorHex: newColorHex,
            #tags: tags,
            #newGoal: newGoal,
          },
        ),
        returnValue:
            _i4.Future<_i2.DriftActivityModel>.value(_FakeDriftActivityModel_0(
          this,
          Invocation.method(
            #updateActivitySettings,
            [],
            {
              #activityName: activityName,
              #newActivityName: newActivityName,
              #newColorHex: newColorHex,
              #tags: tags,
              #newGoal: newGoal,
            },
          ),
        )),
      ) as _i4.Future<_i2.DriftActivityModel>);

  @override
  _i4.Future<_i2.RecordWithActivitySettings> createRecord({
    required String? activityName,
    required int? startTime,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createRecord,
          [],
          {
            #activityName: activityName,
            #startTime: startTime,
          },
        ),
        returnValue: _i4.Future<_i2.RecordWithActivitySettings>.value(
            _FakeRecordWithActivitySettings_1(
          this,
          Invocation.method(
            #createRecord,
            [],
            {
              #activityName: activityName,
              #startTime: startTime,
            },
          ),
        )),
      ) as _i4.Future<_i2.RecordWithActivitySettings>);

  @override
  _i4.Future<void> updateRecordTime({
    required int? idRecord,
    required int? startTime,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateRecordTime,
          [],
          {
            #idRecord: idRecord,
            #startTime: startTime,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.RecordWithActivitySettings> updateRecordSettings({
    required int? idRecord,
    required String? activityName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateRecordSettings,
          [],
          {
            #idRecord: idRecord,
            #activityName: activityName,
          },
        ),
        returnValue: _i4.Future<_i2.RecordWithActivitySettings>.value(
            _FakeRecordWithActivitySettings_1(
          this,
          Invocation.method(
            #updateRecordSettings,
            [],
            {
              #idRecord: idRecord,
              #activityName: activityName,
            },
          ),
        )),
      ) as _i4.Future<_i2.RecordWithActivitySettings>);

  @override
  _i4.Future<int> getLastRecordId() => (super.noSuchMethod(
        Invocation.method(
          #getLastRecordId,
          [],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<_i2.DriftActivityModel?> findActivitySettings(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #findActivitySettings,
          [name],
        ),
        returnValue: _i4.Future<_i2.DriftActivityModel?>.value(),
      ) as _i4.Future<_i2.DriftActivityModel?>);

  @override
  _i4.Future<_i2.DriftActivityModel> createActivity(
    String? name,
    int? colorHex,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createActivity,
          [
            name,
            colorHex,
          ],
        ),
        returnValue:
            _i4.Future<_i2.DriftActivityModel>.value(_FakeDriftActivityModel_0(
          this,
          Invocation.method(
            #createActivity,
            [
              name,
              colorHex,
            ],
          ),
        )),
      ) as _i4.Future<_i2.DriftActivityModel>);

  @override
  _i4.Future<void> updateRecordEmoji(
    int? idRecord,
    String? emoji,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateRecordEmoji,
          [
            idRecord,
            emoji,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<String>?> searchActivities(String? activityName) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchActivities,
          [activityName],
        ),
        returnValue: _i4.Future<List<String>?>.value(),
      ) as _i4.Future<List<String>?>);

  @override
  _i4.Future<List<String>> searchTags(String? tag) => (super.noSuchMethod(
        Invocation.method(
          #searchTags,
          [tag],
        ),
        returnValue: _i4.Future<List<String>>.value(<String>[]),
      ) as _i4.Future<List<String>>);
}
